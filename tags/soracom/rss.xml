<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>&#x2F;&#x2F;&#x2F; ----- -..- -.... -... - soracom</title>
        <link>https://0x6b.github.io</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://0x6b.github.io/tags/soracom/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 16 Dec 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>soratun を改造して AWS Lambda から簡単に SORACOM Arc を使ってみました</title>
            <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
            <link>https://0x6b.github.io/soracom-arc-and-aws-lambda-extension/</link>
            <guid>https://0x6b.github.io/soracom-arc-and-aws-lambda-extension/</guid>
            <description>&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2021&#x2F;soracominc&quot;&gt;株式会社ソラコム Advent Calendar 2021 のカレンダー&lt;&#x2F;a&gt; 16 日目の記事です。今日は 2021 年 6 月に発表された &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;arc&#x2F;&quot;&gt;SORACOM Arc&lt;&#x2F;a&gt; (以下 Arc) とそのクライアントエージェント &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soratun&#x2F;&quot;&gt;soratun&lt;&#x2F;a&gt;、そして AWS Lambda extension のお話です。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;soracom-arc-toha&quot;&gt;SORACOM Arc とは&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;users.soracom.io&#x2F;ja-jp&#x2F;docs&#x2F;arc&#x2F;&quot;&gt;SORACOM Arc&lt;&#x2F;a&gt; はソラコムが 2021 年 6 月にリリースした、SIM カードがなくてもソラコムのプラットフォームサービスをセキュアに利用できるサービスです。伝送路の安全性を &lt;a href=&quot;https:&#x2F;&#x2F;www.wireguard.com&#x2F;&quot;&gt;WireGuard&lt;&#x2F;a&gt; を使って確保しており、WireGuard を使える機器であれば iPhone や Android のようなスマートフォンから、Raspberry Pi を含む Linux、そして M5Stack で利用されている ESP32 でも動作します(参照: &lt;a href=&quot;https:&#x2F;&#x2F;zenn.dev&#x2F;ciniml&#x2F;articles&#x2F;wireguard-esp32&quot;&gt;WireGuard for ESP32 の実装的なところ&lt;&#x2F;a&gt;—ciniml さんによる &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2021&#x2F;soracom&quot;&gt;SORACOM Advent Calendar 2021&lt;&#x2F;a&gt; 7 日目の記事)。&lt;&#x2F;p&gt;
&lt;p&gt;物理的な SIM カードに代わってバーチャル SIM を発行し、バーチャル SIM に紐付いた WireGuard 認証情報を使って SORACOM プラットフォームと接続します。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;soratun-toha&quot;&gt;soratun とは&lt;&#x2F;h3&gt;
&lt;p&gt;soratun (&lt;em&gt;&lt;strong&gt;sora&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;-com &lt;em&gt;&lt;strong&gt;tun&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;-nel, ソラタン) とは SORACOM Arc を簡単・安全に使っていただくために開発した WireGuard クライアントで、MIT ライセンスで公開しています。&lt;&#x2F;p&gt;
&lt;p&gt;バーチャル SIM は &lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; や &lt;a href=&quot;https:&#x2F;&#x2F;users.soracom.io&#x2F;ja-jp&#x2F;tools&#x2F;cli&#x2F;&quot;&gt;SORACOM CLI&lt;&#x2F;a&gt; から作成できますが、soratun は作成から仮想ネットワークデバイス(tun)を使った WireGuard 接続までを一つのコンパクトなバイナリファイルでまとめていい感じにやってくれます。詳細は &lt;a href=&quot;https:&#x2F;&#x2F;users.soracom.io&#x2F;ja-jp&#x2F;docs&#x2F;arc&#x2F;soratun-overview&#x2F;&quot;&gt;公式ドキュメント&lt;&#x2F;a&gt; や &lt;a href=&quot;https:&#x2F;&#x2F;soracom.connpass.com&#x2F;event&#x2F;218134&#x2F;&quot;&gt;SORACOM Meetup〜Wi-Fi からもソラコムを！はじめよう新サービス SORACOM Arc&lt;&#x2F;a&gt; で発表した資料 &lt;a href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;soracom&#x2F;soracom-meetup-arc-soratun-overview&quot;&gt;クライアントエージェント soratun とは &#x2F; SORACOM Meetup Arc soratun overview - Speaker Deck&lt;&#x2F;a&gt; をご覧ください。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aws-lambda-extension-toha&quot;&gt;AWS Lambda Extension とは&lt;&#x2F;h3&gt;
&lt;p&gt;AWS Lambda extension は 2021 年 5 月に GA となった比較的新しい機能で、AWS Lambda (以下 Lambda) 関数の実行環境を独自に拡張できます。こちらも詳細は &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;using-extensions.html&quot;&gt;公式ドキュメント&lt;&#x2F;a&gt; をご覧いただきたいところですが、誤解を恐れずに今回のユースケースに絞って簡単に説明すると、Lambda の実行環境に Lambda 関数とネットワーク経由でコミュニケーションできる独自のプロセスを立てられる機能です。&lt;&#x2F;p&gt;
&lt;p&gt;GA が発表された &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;jp&#x2F;blogs&#x2F;aws&#x2F;getting-started-with-using-your-favorite-operational-tools-on-aws-lambda-extensions-are-now-generally-available&#x2F;&quot;&gt;記事&lt;&#x2F;a&gt; ではトレーシング、ロギング、モニタリング、プロファイリングなどの extension が紹介されています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aws-lambda-extension-to-soracom-arc&quot;&gt;AWS Lambda Extension と SORACOM Arc&lt;&#x2F;h2&gt;
&lt;p&gt;ようやく本題です。Lambda extension と改造版 soratun を組み合わせて以下のようなことをやりました。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;soratun&lt;&#x2F;code&gt; を SORACOM プラットフォームへのプロキシサーバーとして動作するよう改造しました (雑に &lt;code&gt;soraproxy&lt;&#x2F;code&gt; と命名)。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;soraproxy&lt;&#x2F;code&gt; を Lambda extension として動作するよう AWS のサンプルを元にラッパースクリプトを作りました。&lt;&#x2F;li&gt;
&lt;li&gt;Lambda extension を経由して Lambda 関数からプログラミング言語を問わず簡単に SORACOM プラットフォームへデータを送信できるようになりました。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;アウトプットの質と量で尊敬する 1stship さんによる &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2021&#x2F;soracom&quot;&gt;SORACOM Advent Calendar 2021&lt;&#x2F;a&gt; 13 日目の記事 &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;1stship&#x2F;items&#x2F;6885e6d1dd42defbb448&quot;&gt;SORACOM Arc を特権なしで使えるツールを開発してみた&lt;&#x2F;a&gt; を直前に拝見してネタが重複してしまったかと焦りましたが、アプローチが異なっていたのでよかったです。そして 1stship さんの記事は AWS やソラコムのスクリーンショット満載で大変親切であります。&lt;&#x2F;p&gt;
&lt;p&gt;以下にそれぞれのステップを説明します。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;soratun-nogai-zao&quot;&gt;&lt;code&gt;soratun&lt;&#x2F;code&gt; の改造&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;soratun&lt;&#x2F;code&gt; を SORACOM プラットフォームへのプロキシサーバーとして動作するよう改造します。既存の &lt;code&gt;soratun&lt;&#x2F;code&gt; コマンドとは別に &lt;code&gt;soraproxy&lt;&#x2F;code&gt; というコマンドを作っています。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;soratun&lt;&#x2F;code&gt; の WireGuard 実装そのものはユーザー空間で動くとはいえ、稼動には tun デバイスの作成が必須です。実際に試していないのですが、Lambda extension では root 権限(正確には &lt;code&gt;NET_ADMIN&lt;&#x2F;code&gt; capability)が必要になるネットワークインターフェースの作成ができないような気がしました。&lt;&#x2F;p&gt;
&lt;p&gt;そこで、&lt;code&gt;soratun&lt;&#x2F;code&gt; が使用している &lt;a href=&quot;https:&#x2F;&#x2F;git.zx2c4.com&#x2F;wireguard-go&quot;&gt;wireguard-go&lt;&#x2F;a&gt; に含まれる &lt;a href=&quot;https:&#x2F;&#x2F;git.zx2c4.com&#x2F;wireguard-go&#x2F;tree&#x2F;tun&#x2F;netstack&quot;&gt;&lt;code&gt;tun&#x2F;netstack&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; パッケージを利用します。このパッケージはドキュメントがほとんど無いのですが、&lt;a href=&quot;https:&#x2F;&#x2F;gvisor.dev&#x2F;&quot;&gt;gVisor&lt;&#x2F;a&gt; の TCP&#x2F;IP スタックを使った WireGuard トンネルを提供します。すなわちネットワークインターフェースを含め WireGuard 接続を全部ユーザー空間で実装できる(= 特別な権限が不要)ことになります。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;soratun&lt;&#x2F;th&gt;&lt;th&gt;soraproxy&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;WireGuard&lt;&#x2F;td&gt;&lt;td&gt;ユーザー空間 (wireguard-go)&lt;&#x2F;td&gt;&lt;td&gt;ユーザー空間 (wireguard-go)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ネットワーク&lt;&#x2F;td&gt;&lt;td&gt;カーネル (tun)&lt;&#x2F;td&gt;&lt;td&gt;ユーザー空間 (gVisor)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;プロキシサーバーとしての実装はだいぶ適当で、SORACOM プラットフォームの &lt;a href=&quot;https:&#x2F;&#x2F;users.soracom.io&#x2F;ja-jp&#x2F;docs&#x2F;unified-endpoint&#x2F;&quot;&gt;Unified Endpoint&lt;&#x2F;a&gt; に対する HTTP クライアントを作成し、受け取った POST リクエストを転送します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun&#x2F;blob&#x2F;8735ab99fe3ea2fd2f76bbc7ca56710431b1a5ed&#x2F;cmd&#x2F;soraproxy_up.go&quot;&gt;&lt;code&gt;cmd&#x2F;soraproxy_up.go&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;今回のポイントである &lt;code&gt;tun&#x2F;netstack&lt;&#x2F;code&gt; パッケージを使用しているのはこのあたりです。gVisor を使ったトンネルを作成し Go の &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;net&#x2F;http#Client&quot;&gt;net&#x2F;http.Client&lt;&#x2F;a&gt; の &lt;code&gt;Transport&lt;&#x2F;code&gt; として渡しています。簡単ですね。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun&#x2F;blob&#x2F;8735ab99fe3ea2fd2f76bbc7ca56710431b1a5ed&#x2F;unified_endpoint_http_client.go#L47&quot;&gt;&lt;code&gt;unified_endpoint_http_client.go#47&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;aws-lambda-extension-tositepatukezi&quot;&gt;AWS Lambda Extension としてパッケージ&lt;&#x2F;h3&gt;
&lt;p&gt;AWS の公式サンプル &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws-samples&#x2F;aws-lambda-extensions&#x2F;blob&#x2F;d240b9d9658b2f5fec7ca96fbb2bb773f0221c9e&#x2F;custom-runtime-extension-demo&#x2F;extensionssrc&#x2F;extensions&#x2F;extension1.sh&quot;&gt;&lt;code&gt;aws-lambda-extensions&#x2F;extension1.sh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; を参考に &lt;code&gt;soraproxy&lt;&#x2F;code&gt; が Lambda extension として動作するようラッパースクリプトを作成します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun&#x2F;blob&#x2F;8735ab99fe3ea2fd2f76bbc7ca56710431b1a5ed&#x2F;aws-lambda-extension&#x2F;extensions&#x2F;extension.sh#L43&quot;&gt;&lt;code&gt;aws-lambda-extension&#x2F;extensions&#x2F;extension.sh#43&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;LAMBDA_TASK_ROOT&lt;&#x2F;code&gt; 環境変数を使用し、SORACOM Arc の認証情報 (&lt;code&gt;arc.json&lt;&#x2F;code&gt;) は Lambda 関数にパッケージされたファイルを参照しています。Lambda 関数単位でバーチャル SIM を切り替えるのも簡単ですね。最後に &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; を付けずにブロックしてしまってはまりましたが、厳密には &lt;code&gt;soraproxy&lt;&#x2F;code&gt; の起動まで待つようにしないと問題が起きそうな概念検証感あふれる実装であります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;&#x2F;opt&#x2F;bin&#x2F;soraproxy&lt;&#x2F;span&gt;&lt;span&gt; up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; --config &lt;&#x2F;span&gt;&lt;span&gt;${LAMBDA_TASK_ROOT}&#x2F;arc.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; --address &lt;&#x2F;span&gt;&lt;span&gt;${SORAPROXY_ADDRESS}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; --port &lt;&#x2F;span&gt;&lt;span&gt;${SORAPROXY_PORT} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;soraproxy&lt;&#x2F;code&gt; のバイナリと上記のスクリプトを &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun&#x2F;blob&#x2F;8735ab99fe3ea2fd2f76bbc7ca56710431b1a5ed&#x2F;aws-lambda-extension&#x2F;scripts&#x2F;build.sh&quot;&gt;&lt;code&gt;aws-lambda-extension&#x2F;scripts&#x2F;build.sh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; を使って Zip ファイルにまとめ、Lambda レイヤーとして登録します(参考: &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ja_jp&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;configuration-layers.html&quot;&gt;Lambda レイヤーの作成と共有 - AWS Lambda&lt;&#x2F;a&gt;)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;soraproxy-woshi-yong-suru-aws-lambda-guan-shu-noshi-zhuang&quot;&gt;&lt;code&gt;soraproxy&lt;&#x2F;code&gt; を使用する AWS Lambda 関数の実装&lt;&#x2F;h3&gt;
&lt;p&gt;新しい Lambda 関数を作って上記の Lambda extension をレイヤーとして指定します(Lambda 関数の言語は何でも使えますが、レイヤーは ARN で指定する必要がありました)。&lt;&#x2F;p&gt;
&lt;p&gt;今回は JavaScript でテストしました。関数(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun&#x2F;blob&#x2F;8735ab99fe3ea2fd2f76bbc7ca56710431b1a5ed&#x2F;aws-lambda-extension&#x2F;example&#x2F;index.js&quot;&gt;&lt;code&gt;index.js&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;)と SORACOM Arc の認証情報を保存した &lt;code&gt;arc.json&lt;&#x2F;code&gt; (&lt;code&gt;soratun&lt;&#x2F;code&gt; で使っているものそのまま)の 2 つのみです。Lambda 関数としてはシンプルで、&lt;code&gt;soraproxy&lt;&#x2F;code&gt; が待ち受けている &lt;code&gt;localhost:8080&lt;&#x2F;code&gt; へ &lt;code&gt;POST&lt;&#x2F;code&gt; しています。これだけで Unified Endpoint へデータが送信できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;http&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;http&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      { host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;localhost&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;POST&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;chunk))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;end&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;({ statusCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;buffer }))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;error&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;({ statusCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;(e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#f29668;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;(event))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;0x6b.github.io&#x2F;soracom-arc-and-aws-lambda-extension&#x2F;lambda-management-console.png&quot; alt=&quot;AWS Lambda Management Console&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;テスト実行すると、以下のように Lambda extension (&lt;code&gt;soraproxy&lt;&#x2F;code&gt;) が WireGuard 接続を初期化し、Unified Endpoint へ &lt;code&gt;POST&lt;&#x2F;code&gt; している様子が見えます。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#0f1419;color:#bfbab0;&quot;&gt;&lt;code&gt;&lt;span&gt;Function Logs
&lt;&#x2F;span&gt;&lt;span&gt;15:23:32 setup proxy server for Unified Endpoint
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy) 2021&#x2F;12&#x2F;12 15:23:32 proxy server for Unified Endpoint started at 0.0.0.0:8080
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: handshake worker 1 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: encryption worker 1 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: decryption worker 1 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: encryption worker 2 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: receive incoming v4 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 peer(cx&#x2F;Q…7vVA) - Routine: sequential sender - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 peer(cx&#x2F;Q…7vVA) - Routine: sequential receiver - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: decryption worker 2 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: handshake worker 2 - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: TUN reader - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Routine: event worker - started
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 Interface up requested
&lt;&#x2F;span&gt;&lt;span&gt;EXTENSION	Name: extension.sh	State: Ready	Events: [SHUTDOWN,INVOKE]
&lt;&#x2F;span&gt;&lt;span&gt;+ trap - SIGTERM
&lt;&#x2F;span&gt;&lt;span&gt;+ EVENT_DATA=&amp;#39;{&amp;quot;eventType&amp;quot;:&amp;quot;INVOKE&amp;quot;,&amp;quot;deadlineMs&amp;quot;:1639322915570,&amp;quot;requestId&amp;quot;:&amp;quot;xxxxxxxx-68e3-4be4-a682-e362c35837ff&amp;quot;,&amp;quot;invokedFunctionArn&amp;quot;:&amp;quot;arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:soraproxy&amp;quot;,&amp;quot;tracing&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;X-Amzn-Trace-Id&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Root=1-61b613f3-37678b955845097c7d499e07;Parent=033592cd59b3e60b;Sampled=0&amp;quot;}}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;+ [[ {&amp;quot;eventType&amp;quot;:&amp;quot;INVOKE&amp;quot;,&amp;quot;deadlineMs&amp;quot;:1639322915570,&amp;quot;requestId&amp;quot;:&amp;quot;xxxxxxxx-68e3-4be4-a682-e362c35837ff&amp;quot;,&amp;quot;invokedFunctionArn&amp;quot;:&amp;quot;arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:soraproxy&amp;quot;,&amp;quot;tracing&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;X-Amzn-Trace-Id&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Root=1-61b613f3-37678b955845097c7d499e07;Parent=033592cd59b3e60b;Sampled=0&amp;quot;}} == *\S\H\U\T\D\O\W\N* ]]
&lt;&#x2F;span&gt;&lt;span&gt;+ echo &amp;#39;[extension.sh] Received event: {&amp;quot;eventType&amp;quot;:&amp;quot;INVOKE&amp;quot;,&amp;quot;deadlineMs&amp;quot;:1639322915570,&amp;quot;requestId&amp;quot;:&amp;quot;xxxxxxxx-68e3-4be4-a682-e362c35837ff&amp;quot;,&amp;quot;invokedFunctionArn&amp;quot;:&amp;quot;arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:soraproxy&amp;quot;,&amp;quot;tracing&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;X-Amzn-Trace-Id&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Root=1-61b613f3-37678b955845097c7d499e07;Parent=033592cd59b3e60b;Sampled=0&amp;quot;}}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;[extension.sh] Received event: {&amp;quot;eventType&amp;quot;:&amp;quot;INVOKE&amp;quot;,&amp;quot;deadlineMs&amp;quot;:1639322915570,&amp;quot;requestId&amp;quot;:&amp;quot;xxxxxxxx-68e3-4be4-a682-e362c35837ff&amp;quot;,&amp;quot;invokedFunctionArn&amp;quot;:&amp;quot;arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:soraproxy&amp;quot;,&amp;quot;tracing&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;X-Amzn-Trace-Id&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Root=1-61b613f3-37678b955845097c7d499e07;Parent=033592cd59b3e60b;Sampled=0&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;+ sleep 1
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy) 2021&#x2F;12&#x2F;12 15:23:32 route POST &#x2F; to Unified Endpoint
&lt;&#x2F;span&gt;&lt;span&gt;--- Request dump ---------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;POST &#x2F; HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;Host: 100.127.69.42:80
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;key1&amp;quot;:10.2,&amp;quot;key2&amp;quot;:0,&amp;quot;key3&amp;quot;:5}
&lt;&#x2F;span&gt;&lt;span&gt;--- End of request dump --------------------------
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 peer(cx&#x2F;Q…7vVA) - Sending handshake initiation
&lt;&#x2F;span&gt;&lt;span&gt;DEBUG: (soraproxy&#x2F;proxy&#x2F;tunnel) 2021&#x2F;12&#x2F;12 15:23:32 peer(cx&#x2F;Q…7vVA) - Received handshake response
&lt;&#x2F;span&gt;&lt;span&gt;--- Response dump --------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 201 Created
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;Content-Length: 0
&lt;&#x2F;span&gt;&lt;span&gt;Date: Sun, 12 Dec 2021 15:23:32 GMT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--- End of response dump -------------------------
&lt;&#x2F;span&gt;&lt;span&gt;+ true
&lt;&#x2F;span&gt;&lt;span&gt;+ echo &amp;#39;[extension.sh] Waiting for event. Get &#x2F;next event from http:&#x2F;&#x2F;127.0.0.1:9001&#x2F;2020-01-01&#x2F;extension&#x2F;event&#x2F;next&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;[extension.sh] Waiting for event. Get &#x2F;next event from http:&#x2F;&#x2F;127.0.0.1:9001&#x2F;2020-01-01&#x2F;extension&#x2F;event&#x2F;next
&lt;&#x2F;span&gt;&lt;span&gt;+ PID=50
&lt;&#x2F;span&gt;&lt;span&gt;+ forward_sigterm_and_wait
&lt;&#x2F;span&gt;&lt;span&gt;+ trap _term SIGTERM
&lt;&#x2F;span&gt;&lt;span&gt;+ &#x2F;opt&#x2F;bin&#x2F;curl -sS -L -XGET http:&#x2F;&#x2F;127.0.0.1:9001&#x2F;2020-01-01&#x2F;extension&#x2F;event&#x2F;next --header &amp;#39;Lambda-Extension-Identifier: xxxxxxxx-6dff-4060-83b5-c3fac699488f&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;+ wait 50
&lt;&#x2F;span&gt;&lt;span&gt;END RequestId: xxxxxxxx-68e3-4be4-a682-e362c35837ff
&lt;&#x2F;span&gt;&lt;span&gt;REPORT RequestId: xxxxxxxx-68e3-4be4-a682-e362c35837ff	Duration: 1005.43 ms	Billed Duration: 1006 ms	Memory Size: 512 MB	Max Memory Used: 81 MB	Init Duration: 275.38 ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-sitemitaifang-ha&quot;&gt;試してみたい方は&lt;&#x2F;h3&gt;
&lt;p&gt;実験的な機能であることから &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soratun&#x2F;&quot;&gt;soracom&#x2F;soratun&lt;&#x2F;a&gt; にはマージしていません。soratun のメインのターゲットである Raspberry Pi (の 32-bit 版)を gVisor が &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;gvisor&#x2F;issues&#x2F;5692#issuecomment-842600032&quot;&gt;正式にサポートしていない&lt;&#x2F;a&gt; ことが大きな理由です。とはいえ soratun はオープンソースとして公開しており、要件に応じたカスタマイズの土台として利用できます。今回のようにすべてユーザー空間で実装する方式にはいろいろな可能性がありそうに思いますのでぜひお試しください。&lt;&#x2F;p&gt;
&lt;p&gt;Lambda extension レイヤーの Zip ファイルアーカイブを作る手順は以下のとおりです。&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun&#x2F;blob&#x2F;main&#x2F;docs&#x2F;CONTRIBUTING.md&quot;&gt;soratun&#x2F;CONTRIBUTING.md&lt;&#x2F;a&gt; の Prerequisites が必要です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soratun
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd soratun
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git switch soraproxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; make lambda-extension
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;aws-lambda-extension&#x2F;soraproxy.zip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;差分全体は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soratun&#x2F;compare&#x2F;main...0x6b:soraproxy?expand=1&quot;&gt;GitHub&lt;&#x2F;a&gt; でご覧ください。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに、最近の gVisor ではコンパイルに失敗してしまうため少し古めのバージョンを使用しています。コミットログから分かるように &lt;code&gt;soraproxy&lt;&#x2F;code&gt; は結構前から試作していたのですが、アドベントカレンダーしめきり前に最新パッケージにしようとして失敗して焦りました。詳細は追いかけられていません。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;wireguard-go と gVisor という超巨人の肩を借りつつ AWS Lambda extension として実装することで、Lambda 関数から簡単にソラコムのプラットフォームサービスを利用できるようになりました。&lt;&#x2F;p&gt;
&lt;p&gt;2021 年 12 月現在、SORACOM Arc は 1 アカウントあたりバーチャル SIM1 契約分の基本使用料(月額)、1GB 分のデータ通信が無料で利用できますのでぜひお試しください。&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>SORACOM Napter で簡単に SSH できる nssh を作りました</title>
            <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
            <link>https://0x6b.github.io/nssh/</link>
            <guid>https://0x6b.github.io/nssh/</guid>
            <description>&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2020&#x2F;soracom&quot;&gt;SORACOM Advent Calendar 2020&lt;&#x2F;a&gt; 7 日目の記事です。今日は昨年の &lt;a href=&quot;https:&#x2F;&#x2F;0x6b.github.io&#x2F;nssh&#x2F;&quot;&gt;SORACOM Napter 用の Visual Studio Code 拡張を作りました&lt;&#x2F;a&gt; に続いて &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;napter&#x2F;&quot;&gt;SORACOM Napter&lt;&#x2F;a&gt; (以下 Napter) に関する話題です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soracom-napter-toha&quot;&gt;SORACOM Napter とは&lt;&#x2F;h2&gt;
&lt;p&gt;Napter は、SORACOM の SIM を使用したデバイスへ簡単にセキュアにリモートアクセスできるサービスです。SORACOM IoT SIM の刺さっているデバイスであれば、グローバル IP アドレスを割り当てたり、踏み台サーバーを用意したり、デバイスにエージェントをインストールしたりせずリモートからアクセスできます。必要な時にさっとアクセスできるためちょっとした作業やメンテナンス時にとても便利に使っています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nssh-toha&quot;&gt;&lt;code&gt;nssh&lt;&#x2F;code&gt; とは&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;nssh&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;nssh&quot;&gt;GitHub repository&lt;&#x2F;a&gt;) は、SIM に付けた名前を利用して簡単に SSH できる CLI アプリケーションです。&lt;&#x2F;p&gt;
&lt;img src=&quot;nssh.gif&quot; width=&quot;100%&quot; alt=&quot;How nssh works&quot; title=&quot;How nssh works&quot;&#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;残念ながら現時点では macOS のみで動作します。Linux と Windows で実行すると &lt;code&gt;x&#x2F;crypto&#x2F;ssh.readVersion&lt;&#x2F;code&gt; の途中でハングアップしてしまい SSH 接続が確立できません。手元では &lt;a href=&quot;https:&#x2F;&#x2F;mattn.kaoriya.net&#x2F;software&#x2F;lang&#x2F;go&#x2F;20170111165324.htm&quot;&gt;Big Sky :: Windows からも ssh でリモートコマンド実行したい、それ golang で出来るよ&lt;&#x2F;a&gt; のサンプルも動作しなかったので環境起因の問題かなと思われますが、アドベントカレンダーの期日までに調査できませんでした。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;昨年作った Visual Studio Code 用の拡張 &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=0x6b.nssh&quot;&gt;SORACOM Napter Tools&lt;&#x2F;a&gt; は今も便利に使っています。しかしながらどんどんものぐさになっていくもので、簡単な作業 — ログを見る、SORACOM Harvest にテスト的にデータを送ってみるなど — のたびに vscode の新規ウィンドウが立ち上がってくるのが面倒だなーと思うようになってきました。&lt;&#x2F;p&gt;
&lt;p&gt;シェルスクリプトで &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;&quot;&gt;SORACOM CLI&lt;&#x2F;a&gt; のラッパーを作ってもよかったのですが、&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;golang.org&#x2F;x&#x2F;crypto&#x2F;ssh&quot;&gt;&lt;code&gt;x&#x2F;crypto&#x2F;ssh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; という Go の標準パッケージが簡単に使えそうだったため勉強を兼ねて作成しました。勉強なので &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-sdk-go&quot;&gt;soracom&#x2F;soracom-sdk-go&lt;&#x2F;a&gt; は使用せずすべて自前で実装しています。&lt;&#x2F;p&gt;
&lt;p&gt;ここから事前準備と使い方を説明します。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-qian-zhun-bei&quot;&gt;事前準備&lt;&#x2F;h2&gt;
&lt;p&gt;一度だけの事前準備として以下の 4 ステップが必要です。公式ドキュメントを紹介しつつ、簡単に手順を説明します。SORACOM Advent Calendar ということでアカウントの作成などは省いていますが、まだの方はぜひ &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;start&#x2F;&quot;&gt;SORACOM Air for セルラーの利用方法: 今すぐ始めよう&lt;&#x2F;a&gt; から。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(SORACOM ユーザーコンソールの作業) SAM ユーザーを作成し、認証キー ID と認証キーシークレットを生成する&lt;&#x2F;li&gt;
&lt;li&gt;(SORACOM ユーザーコンソールの作業) SSH でアクセスしたい SIM カードに名前をつける&lt;&#x2F;li&gt;
&lt;li&gt;(アクセス元マシンでの作業) &lt;code&gt;nssh&lt;&#x2F;code&gt; をインストールする&lt;&#x2F;li&gt;
&lt;li&gt;(アクセス先マシンでの作業) Raspberry Pi などに USB ドングル + SORACOM IoT SIM を装着する&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;sam-yuzawozuo-cheng-si-ren-zheng-ki-id-toren-zheng-kisikuretutowosheng-cheng-suru&quot;&gt;SAM ユーザーを作成し、認証キー ID と認証キーシークレットを生成する&lt;&#x2F;h3&gt;
&lt;p&gt;この拡張は SORACOM API を使用していますので、呼び出しのために認証キー ID と認証キーシークレットが必要です。まずはこれらをゲットしましょう。&lt;&#x2F;p&gt;
&lt;p&gt;セキュリティの観点から専用の SORACOM Access Managament (SAM) ユーザーを作成することをおすすめしますが、すでに SORACOM CLI などを利用中で、必要な権限を持っている &lt;code&gt;default.json&lt;&#x2F;code&gt; がある場合はコピーして &lt;code&gt;nssh.json&lt;&#x2F;code&gt; を作っても OK です。SAM は、管理ユーザー毎にアクセス権限を設定できるアクセス管理機能で、不要なアクセスや操作ミスを未然に防げます。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&#x2F;&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; へログイン&lt;&#x2F;li&gt;
&lt;li&gt;右上のユーザー名のボタンから &lt;strong&gt;セキュリティ&lt;&#x2F;strong&gt; をクリック&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ユーザー作成&lt;&#x2F;strong&gt; ボタンをクリックし、適当な名前と説明を入力して &lt;strong&gt;作成&lt;&#x2F;strong&gt; ボタンをクリック&lt;&#x2F;li&gt;
&lt;li&gt;作成したユーザー名をクリック&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;権限設定&lt;&#x2F;strong&gt; タブで以下の設定を入力し &lt;strong&gt;保存&lt;&#x2F;strong&gt; ボタンをクリック&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;statements&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;api&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:listSubscribers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:listPortMappingsForSubscriber&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:createPortMapping&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;effect&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;allow&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;strong&gt;認証設定&lt;&#x2F;strong&gt; タブの &lt;strong&gt;認証キーを生成&lt;&#x2F;strong&gt; ボタンをクリックし表示された &lt;strong&gt;認証キー ID&lt;&#x2F;strong&gt; と &lt;strong&gt;認証キーシークレット&lt;&#x2F;strong&gt; をコピー&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$HOME&#x2F;.soracom&#x2F;nssh.json&lt;&#x2F;code&gt; として以下の内容を保存&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;coverageType&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;jp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; デフォルトのカバレッジ
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;authKeyId&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;keyId-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; 認証キー ID
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;authKey&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;secret-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; 認証キーシークレット
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;用語や詳細なガイドは &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;api_guide&#x2F;&quot;&gt;SORACOM API 利用ガイド&lt;&#x2F;a&gt; を、権限設定の詳細は &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;sam&#x2F;#sam01&quot;&gt;SORACOM Access Management を使用して操作権限を管理する&lt;&#x2F;a&gt; も参照してみてください。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssh-deakusesusitai-sim-kadoniming-qian-wotukeru&quot;&gt;SSH でアクセスしたい SIM カードに名前をつける&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;console&#x2F;#sim_detail&quot;&gt;ユーザーコンソールの使い方&lt;&#x2F;a&gt; などを参照し名前をつけておいてください。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nssh-woinsutorusuru&quot;&gt;&lt;code&gt;nssh&lt;&#x2F;code&gt; をインストールする&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;nssh&#x2F;releases&quot;&gt;Releases&lt;&#x2F;a&gt; セクションからバイナリをダウンロードし、展開した実行ファイルを &lt;code&gt;PATH&lt;&#x2F;code&gt; の通ったディレクトリへ置いてください。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;raspberry-pi-nadoni-usb-donguru-soracom-iot-sim-wozhuang-zhao-suru&quot;&gt;Raspberry Pi などに USB ドングル + SORACOM IoT SIM を装着する&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;products&#x2F;module&#x2F;ak-020&#x2F;&quot;&gt;3G 対応データ通信端末 AK-020&lt;&#x2F;a&gt; や &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;products&#x2F;module&#x2F;ms2372h_607&#x2F;&quot;&gt;LTE 対応データ通信端末 Huawei MS2372h-607&lt;&#x2F;a&gt; などに SORACOM の SIM をセットし Raspberry Pi に装着、 &lt;a href=&quot;https:&#x2F;&#x2F;soracom-files.s3.amazonaws.com&#x2F;setup_air.sh&quot;&gt;&lt;code&gt;setup_air.sh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; を実行してセルラー通信ができるようにしてください。詳細な手順は &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;device_setting&#x2F;&quot;&gt;各種デバイスで SORACOM Air を使用する&lt;&#x2F;a&gt; にあります。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-ifang&quot;&gt;使い方&lt;&#x2F;h2&gt;
&lt;p&gt;さて、ここまで来たら SSH はあっという間です。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;お好みのターミナルを開きます&lt;&#x2F;li&gt;
&lt;li&gt;SIM の名前を指定して &lt;code&gt;nssh&lt;&#x2F;code&gt; を実行します: &lt;code&gt;nssh connect ユーザー名@SIMの名前&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;SIM の名前に空白やシェルが特別に解釈しそうな文字列を含む場合はクオートするなり &lt;code&gt;&#x27;&lt;&#x2F;code&gt; や &lt;code&gt;&amp;quot;&lt;&#x2F;code&gt; で囲んでみてください。以下のように気が利いている(と思う)ので便利に使えます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SIM がオフラインの場合はポートマッピングを作成しません。&lt;&#x2F;li&gt;
&lt;li&gt;アクセス元の CIDR が許可されているポートマッピングがすでに存在する場合は再利用します。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ユーザー名@&lt;&#x2F;code&gt; を省略した場合は &lt;code&gt;pi&lt;&#x2F;code&gt; を使用します。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そのほかにもいくつかオプションがありますので &lt;code&gt;--help&lt;&#x2F;code&gt; や &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;nssh&quot;&gt;README&lt;&#x2F;a&gt; をご覧ください。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--duration&lt;&#x2F;code&gt;: アクセス可能時間(デフォルト 60 分)を指定&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--port&lt;&#x2F;code&gt;: 宛先ポート(デフォルト &lt;code&gt;22&lt;&#x2F;code&gt;)を指定&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--identity&lt;&#x2F;code&gt;: 公開鍵認証に使用するファイルを指定&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--coverage-type&lt;&#x2F;code&gt;: カバレッジを指定&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--profile-name&lt;&#x2F;code&gt;: 使用するプロファイル(デフォルト &lt;code&gt;nssh&lt;&#x2F;code&gt;) を指定&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;バグ報告やご質問は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;nssh&#x2F;issues&quot;&gt;GitHub Issues&lt;&#x2F;a&gt; までどうぞ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;雑に計測したところ SSH ログインまでの所要時間を大きく短縮できました。45 秒も充分にお手軽ですが、6 秒でアクセスできると便利さのレベルが変わりますね。2020 年 12 月現在、SORACOM Napter は 1 アカウントあたり 1 SIM 分を無料で利用できますのでぜひお試しください。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ユーザーコンソールを使う方法: &lt;strong&gt;45 秒&lt;&#x2F;strong&gt;
&lt;ol&gt;
&lt;li&gt;ブラウザを開く&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&quot;&gt;ユーザーコンソール&lt;&#x2F;a&gt; へログインする (+ MFA 認証)&lt;&#x2F;li&gt;
&lt;li&gt;SIM 一覧画面から自分の SIM を探して選択する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;&#x2F;strong&gt; メニューから &lt;strong&gt;オンデマンドリモートアクセス&lt;&#x2F;strong&gt; を選択する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OK&lt;&#x2F;strong&gt; をクリックする&lt;&#x2F;li&gt;
&lt;li&gt;払い出された IP アドレスとポート番号をターミナルへコピペして SSH アクセスする&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Visual Studio Code 拡張を使う方法: &lt;strong&gt;18 秒&lt;&#x2F;strong&gt;
&lt;ol&gt;
&lt;li&gt;vscode を開く&lt;&#x2F;li&gt;
&lt;li&gt;コマンドパレット(&lt;kbd&gt;⇧⌘P&lt;&#x2F;kbd&gt;)から &lt;code&gt;Create New Port Mapping&lt;&#x2F;code&gt; を選ぶ&lt;&#x2F;li&gt;
&lt;li&gt;対象の SIM を選択する&lt;&#x2F;li&gt;
&lt;li&gt;vscode がなぜか毎回聞いてくるので OS の種類として &lt;code&gt;Linux&lt;&#x2F;code&gt; を選択する&lt;&#x2F;li&gt;
&lt;li&gt;vscode が上がってくるのを待ち統合ターミナルでアクセスする&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nssh&lt;&#x2F;code&gt; を使う方法: &lt;strong&gt;6 秒&lt;&#x2F;strong&gt; (ただし、シェルの履歴機能を使用)
&lt;ol&gt;
&lt;li&gt;ターミナルを開く&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nssh connect ユーザー名@SIMの名前&lt;&#x2F;code&gt; で SSH を開始する&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>SORACOM CLI をもっと便利に使えるツール sorashell を作りました</title>
            <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
            <link>https://0x6b.github.io/super-charge-your-soracom-command-line-experience-with-sorashell/</link>
            <guid>https://0x6b.github.io/super-charge-your-soracom-command-line-experience-with-sorashell/</guid>
            <description>&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2019&#x2F;soracom2&quot;&gt;SORACOM Advent Calendar 2019 ふたつめ&lt;&#x2F;a&gt; 20 日目の記事です。&lt;&#x2F;p&gt;
&lt;p&gt;昨日は @kazntree の &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;kazntree&#x2F;items&#x2F;b2bc92508b789a47506f&quot;&gt;やさしさあふれる AT コマンド入門&lt;&#x2F;a&gt; でした。かるた作者の moznion による &lt;a href=&quot;https:&#x2F;&#x2F;moznion.hatenadiary.com&#x2F;entry&#x2F;2019&#x2F;09&#x2F;20&#x2F;172026&quot;&gt;頒布のお知らせ&lt;&#x2F;a&gt; と比べるとそのやさしさが際立っていますね。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;USB モデムに対して「ショートメッセージ（SMS）送って」とか「USB モデムのメーカーを教えて」などの命令を伝えるためのコマンドが &lt;code&gt;ATコマンド&lt;&#x2F;code&gt; なのです。
— &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;kazntree&#x2F;items&#x2F;b2bc92508b789a47506f&quot;&gt;やさしさあふれる AT コマンド入門 - Qiita&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ホラ，皆さん生きていると &lt;code&gt;AT+COPS&lt;&#x2F;code&gt; とか &lt;code&gt;AT+CGDCONT&lt;&#x2F;code&gt; とかよく見たり喋ったりするじゃないですか？
— &lt;a href=&quot;https:&#x2F;&#x2F;moznion.hatenadiary.com&#x2F;entry&#x2F;2019&#x2F;09&#x2F;20&#x2F;172026&quot;&gt;技術書典 7 (く 39D) にて「AT コマンドかるた」を頒布します！！！ - その手の平は尻もつかめるさ&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;どちらもとても尊敬しているエンジニアなのですが、表現に個性が垣間見えて面白いです。&lt;&#x2F;p&gt;
&lt;p&gt;さて、今回は SORACOM API をコマンドラインから使える &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;&quot;&gt;soracom-cli&lt;&#x2F;a&gt; をさらに便利にする &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;sorashell&#x2F;&quot;&gt;sorashell&lt;&#x2F;a&gt; というツールを作ってみたので紹介です。&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;cli&#x2F;&quot;&gt;aws-cli&lt;&#x2F;a&gt; に対する &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-shell&#x2F;&quot;&gt;aws-shell&lt;&#x2F;a&gt; のような位置付けです。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sorashell&quot;&gt;sorashell&lt;&#x2F;h2&gt;
&lt;p&gt;SORACOM CLI とは前述の通り SORACOM の API をコマンドラインから簡単に呼び出すツールです。&lt;a href=&quot;https:&#x2F;&#x2F;stedolan.github.io&#x2F;jq&#x2F;&quot;&gt;jq&lt;&#x2F;a&gt; など他のコマンドと組み合わせることで日々の操作を効率化しやすく、管理する SIM やデバイスが多くなるほど便利になっていきます。 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;blob&#x2F;master&#x2F;README_ja.md&quot;&gt;README_ja.md&lt;&#x2F;a&gt; から特徴を抜粋します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;API 定義ファイルから自動生成されるので新しい API がリリースされた場合も迅速に対応&lt;&#x2F;li&gt;
&lt;li&gt;Go でクロスコンパイルされたバイナリファイルをターゲットの環境にコピーするだけ&lt;&#x2F;li&gt;
&lt;li&gt;指定された引数を元にリクエストを組み立て、SORACOM API を呼び出し、レスポンス (JSON) をそのまま標準出力へ出力&lt;&#x2F;li&gt;
&lt;li&gt;bash&#x2F;zsh completion (引数補完) に対応&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;もうこれだけで充分に素敵ツールなのですが、たとえば以下のような悩みがありました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--speed-class-filter&lt;&#x2F;code&gt; や &lt;code&gt;--tag-value-match-mode&lt;&#x2F;code&gt; オプションに指定する値が分からず &lt;a href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;search?client=firefox-b-d&amp;amp;q=%E3%82%BD%E3%83%A9%E3%82%B3%E3%83%A0+SIM+%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%AF%E3%83%A9%E3%82%B9&quot;&gt;&lt;code&gt;ソラコム SIM スピードクラス&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; などで検索したり、コマンドを一旦キャンセルしてヘルプを見てしまう&lt;&#x2F;li&gt;
&lt;li&gt;SIM の IMSI や &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;inventory&#x2F;&quot;&gt;SORACOM Inventory&lt;&#x2F;a&gt; のデバイス ID を結局 &lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; からコピペでもってきてしまう&lt;&#x2F;li&gt;
&lt;li&gt;SIM や Sigfox デバイスの名前で &lt;code&gt;subscribers get&lt;&#x2F;code&gt; や &lt;code&gt;sigfox-devices get&lt;&#x2F;code&gt; できるともっと便利なのに&lt;&#x2F;li&gt;
&lt;li&gt;必須オプション覚えられない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そんなときに aws-shell を試してみて、これは便利だなと思い Go の勉強を兼ね作ってみました。&lt;&#x2F;p&gt;
&lt;center&gt;
  &lt;video controls&gt;
    &lt;source src=&quot;screencast.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
    Your browser does not support the video tag.
  &lt;&#x2F;video&gt;
  &lt;figcaption&gt;sorashell&lt;&#x2F;figcaption&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;補完機能と Fuzzy マッチがとても便利で日々使っています。自分用のはじめての Go プログラムということで荒削りな部分だらけで現時点では macOS のみ対応です。コマンドのパース部分をもっとちゃんと書きたい感じです。&lt;&#x2F;p&gt;
&lt;p&gt;補完を含むターミナル UI は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;c-bata&#x2F;go-prompt&#x2F;&quot;&gt;c-bata&#x2F;go-prompt&lt;&#x2F;a&gt; という素晴らしいライブラリを利用しました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-qian-zhun-bei&quot;&gt;事前準備&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;soracom&lt;&#x2F;code&gt; コマンドを &lt;code&gt;os&#x2F;exec&lt;&#x2F;code&gt; 使って呼び出しているだけですので、使うためには SORACOM CLI のセットアップが必要です。 &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;cli_guide&#x2F;&quot;&gt;SORACOM CLI 利用ガイド&lt;&#x2F;a&gt; にステップバイステップで記載されています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;insutoru&quot;&gt;インストール&lt;&#x2F;h2&gt;
&lt;p&gt;今のところは Go のインストールとリポジトリのクローン、ビルドが必要です。GitHub Actions などでビルドとリリースを自動化しようと思っていますが、アドベントカレンダーに間に合いませんでした (リポジトリには試行錯誤の残骸あり)。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;dl&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt; の導入&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rakyll&#x2F;static&lt;&#x2F;code&gt; の導入&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;$ go get github.com&#x2F;rakyll&#x2F;statik # install rakyll&#x2F;statik, asset embedder
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;リポジトリのクローン&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;$ git clone https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;sorashell
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ビルド&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;$ cd sorashell
&lt;&#x2F;span&gt;&lt;span&gt;$ make
&lt;&#x2F;span&gt;&lt;span&gt;$ cp .&#x2F;sorashell &#x2F;path&#x2F;to&#x2F;your&#x2F;bin&#x2F;directory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;shi-ifang&quot;&gt;使い方&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sorashell&lt;&#x2F;code&gt; コマンドを実行するとシェルが立ち上がります。 SORACOM CLI と同じグローバルフラグを使えます。&lt;pre style=&quot;background-color:#0f1419;color:#bfbab0;&quot;&gt;&lt;code&gt;&lt;span&gt;    --api-key string         Specify API key otherwise soracom-cli performs authentication on behalf of you
&lt;&#x2F;span&gt;&lt;span&gt;    --api-token string       Specify API token otherwise soracom-cli performs authentication on behalf of you
&lt;&#x2F;span&gt;&lt;span&gt;    --coverage-type string   Specify coverage type, &amp;#39;g&amp;#39; for Global, &amp;#39;jp&amp;#39; for Japan
&lt;&#x2F;span&gt;&lt;span&gt;-h, --help                   help for soracom
&lt;&#x2F;span&gt;&lt;span&gt;    --profile string         Specify profile name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;SORACOM CLI と同じコマンド、引数を受け付けます (最初の &lt;code&gt;soracom&lt;&#x2F;code&gt; は不要)。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; キーで補完候補を移動し &lt;kbd&gt;Space&lt;&#x2F;kbd&gt; キーで選択します。&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;tips-tricks&quot;&gt;Tips &amp;amp; Tricks&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンド名やオプション名は Fuzzy マッチします。たとえば &lt;code&gt;--speed-class-filter&lt;&#x2F;code&gt; は &lt;code&gt;--scf&lt;&#x2F;code&gt; と入力してもマッチします。&lt;&#x2F;li&gt;
&lt;li&gt;コマンドの補完候補が出なくなったら &lt;code&gt;--&lt;&#x2F;code&gt; を入力するとオプションの補完を始めます。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--imsi&lt;&#x2F;code&gt; や &lt;code&gt;--device-id&lt;&#x2F;code&gt;、&lt;code&gt;--resource-id&lt;&#x2F;code&gt; オプションを入力すると、引数の対象となる SIM の IMSI やデバイス ID を取得し補完候補に出します。表示されているすべての文字列 (プランやステータス、名前、モジュールタイプなど) から Fuzzy マッチできます。&lt;&#x2F;li&gt;
&lt;li&gt;必須オプションには説明に &lt;code&gt;(required)&lt;&#x2F;code&gt; と表示されます。&lt;&#x2F;li&gt;
&lt;li&gt;以下のオプションに指定できる補完候補を表示します。
&lt;ul&gt;
&lt;li&gt;SIM ステータス (&lt;code&gt;--status-filter&lt;&#x2F;code&gt;): &lt;code&gt;active&lt;&#x2F;code&gt;, &lt;code&gt;inactive&lt;&#x2F;code&gt;, &lt;code&gt;ready&lt;&#x2F;code&gt;, &lt;code&gt;suspended&lt;&#x2F;code&gt;, &lt;code&gt;terminated&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SIM スピードクラス (&lt;code&gt;--speed-class-filter&lt;&#x2F;code&gt;): &lt;code&gt;s1.minimum&lt;&#x2F;code&gt;, &lt;code&gt;s1.slow&lt;&#x2F;code&gt;, &lt;code&gt;s1.standard&lt;&#x2F;code&gt;, &lt;code&gt;s1.fast&lt;&#x2F;code&gt;, &lt;code&gt;s1.4xfast&lt;&#x2F;code&gt;, &lt;code&gt;t1.standard&lt;&#x2F;code&gt;, &lt;code&gt;u1.slow&lt;&#x2F;code&gt;, &lt;code&gt;u1.standard&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;他のコマンドへのパイプ &lt;code&gt;|&lt;&#x2F;code&gt; やファイルへのリダイレクト &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; が使えます。&lt;&#x2F;li&gt;
&lt;li&gt;先頭に &lt;code&gt;!&lt;&#x2F;code&gt; を入れると通常のコマンド (&lt;code&gt;!cd &#x2F;Users&#x2F;soracom&#x2F;Desktop&lt;&#x2F;code&gt; や &lt;code&gt;!ls&lt;&#x2F;code&gt; など)が実行できます。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;パラメーターとしてファイルを引数に取るコマンド (&lt;code&gt;event-handlers create&lt;&#x2F;code&gt;) をうまく処理できていません。(また、私がよく使うコマンド以外はあまりテストできていませんので、バグやご質問は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;sorashell&#x2F;issues&quot;&gt;GitHub Issues&lt;&#x2F;a&gt; まで。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;IoT は管理対象デバイス数が大量になりがちです。API や CLI を日々の業務に取り入れて効率化していきたいですね。&lt;&#x2F;p&gt;
&lt;p&gt;この記事の URL は Amazon Web Services Solutions Architect ブログへのトリビュートです。タイトルや内容は恐れ多くて真似できませんでした。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.typepad.com&#x2F;sajp&#x2F;2015&#x2F;12&#x2F;super-charge-your-aws-command-line-experience-with-aws-shell.html&quot;&gt;AWS Solutions Architect ブログ: AWS のコマンドライン体験を aws-shell で革新！&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>SORACOM Napter 用の Visual Studio Code 拡張を作りました</title>
            <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
            <link>https://0x6b.github.io/soracom-napter-tools-vscode/</link>
            <guid>https://0x6b.github.io/soracom-napter-tools-vscode/</guid>
            <description>&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2019&#x2F;soracom&quot;&gt;SORACOM Advent Calendar 2019&lt;&#x2F;a&gt; 13 日目の記事です。&lt;&#x2F;p&gt;
&lt;p&gt;昨日は @toolyee からの &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@toolyee&#x2F;iot%E3%81%AE%E4%B8%80%E7%95%AA%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%87%E3%83%A2-%E5%BD%93%E7%A4%BE%E6%AF%94-be76fd2c5184?&quot;&gt;IoT の一番簡単なデモ！(当社比)&lt;&#x2F;a&gt; でした。@hayate_h さんの &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;hayate_h&#x2F;items&#x2F;4b755e15ec9cd5a55e31&quot;&gt;SORACOM LTE-M Button を使って、「モテモテスイッチ」を開発する。&lt;&#x2F;a&gt; から LTE-M ボタンの話題が続いたところで、今回は SORACOM Napter のお話です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soracom-napter-toha&quot;&gt;SORACOM Napter とは&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;napter&#x2F;&quot;&gt;SORACOM Napter&lt;&#x2F;a&gt; (以下 Napter) は、SORACOM の SIM を使用したデバイスへ簡単にセキュアにリモートアクセスできるサービスです。SORACOM IoT SIM のささっているデバイスであれば、グローバル IP アドレスを割り当てたり、踏み台サーバーを用意したり、エージェントなどをインストールしたりせず手軽にリモートからアクセスできます。&lt;&#x2F;p&gt;
&lt;p&gt;同僚が &lt;a href=&quot;https:&#x2F;&#x2F;nodered.org&#x2F;&quot;&gt;Node-RED&lt;&#x2F;a&gt; と組み合わせて &lt;a href=&quot;https:&#x2F;&#x2F;blog.soracom.jp&#x2F;blog&#x2F;2019&#x2F;09&#x2F;10&#x2F;napter-nodered&#x2F;&quot;&gt;ウキウキリモート開発&lt;&#x2F;a&gt; しており、なるほどなーと思っていたのですが、つい最近テスト用に使っていた Raspberry Pi の Wi-Fi が壊れたため私も多用するようになりました (必要なものはすぐに購入できる会社ですが、Raspberry Pi 4 リリースのため品薄ですぐに手に入らず)。&lt;&#x2F;p&gt;
&lt;p&gt;Napter によるオンデマンドリモートアクセスは &lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&#x2F;&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; から有効にできます。以下のように本当に簡単に使えるので私もウキウキリモート開発していました。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ユーザーコンソールへログインする&lt;&#x2F;li&gt;
&lt;li&gt;自分の SIM を探す&lt;&#x2F;li&gt;
&lt;li&gt;メニューから &lt;strong&gt;オンデマンドリモートアクセス&lt;&#x2F;strong&gt; を選択する&lt;&#x2F;li&gt;
&lt;li&gt;OK を押す&lt;&#x2F;li&gt;
&lt;li&gt;払い出された IP アドレスとポート番号をコピペしてターミナルから SSH を使ってアクセスする&lt;&#x2F;li&gt;
&lt;li&gt;あれこれする&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;そんな折りに別の同僚から Visual Studio Code (以下 vscode) の &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-vscode-remote.remote-ssh&quot;&gt;Remote - SSH 拡張&lt;&#x2F;a&gt; を使うと Raspberry Pi での開発がえらく楽になるよと教えてもらいました。試してみるとなるほど便利で、普段使いしているエディタがそのまま使えるしターミナルも使えるしで Napter とあわせて多用するようになりました。&lt;&#x2F;p&gt;
&lt;p&gt;で、日々ユーザーコンソールと vscode を行ったり来たりしていたのですが、ふと「SORACOM はほとんどの操作について &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;api&#x2F;#&#x2F;&quot;&gt;API を公開している&lt;&#x2F;a&gt;し 、vscode も &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;api&#x2F;&quot;&gt;拡張が作れる&lt;&#x2F;a&gt; し、この 2 つを合体させたらえらく便利なのでは？」と思いたち作ってみました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soracom-napter-tools-for-visual-studio-code&quot;&gt;SORACOM Napter Tools for Visual Studio Code&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=0x6b.soracom-napter-tools-vscode&quot;&gt;SORACOM Napter Tools for Visual Studio Code&lt;&#x2F;a&gt; (以下 Napter Tools) という Napter と vscode を組み合わせて便利に使える拡張を作りました。&lt;&#x2F;p&gt;
&lt;center&gt;
  &lt;video controls&gt;
    &lt;source src=&quot;screencast.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
    Your browser does not support the video tag.
  &lt;&#x2F;video&gt;
  &lt;figcaption&gt;SORACOM Napter Tools for Visual Studio Code&lt;&#x2F;figcaption&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;動画を見ていただくと大体想像つくと思いますが、以下の操作が vscode の中で完結します(動画では 3G 使っているため SSH 接続まで少し時間がかかっています)。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;新しいポートマッピング (Napter オンデマンドリモートアクセス)の作成&lt;&#x2F;li&gt;
&lt;li&gt;既存のポートマッピングの情報表示
&lt;ul&gt;
&lt;li&gt;Napter から割り当てられたホスト名、IP アドレス、ポート番号&lt;&#x2F;li&gt;
&lt;li&gt;有効期間&lt;&#x2F;li&gt;
&lt;li&gt;TLS 有効の有無&lt;&#x2F;li&gt;
&lt;li&gt;宛先ポート番号&lt;&#x2F;li&gt;
&lt;li&gt;接続可能なソース IP アドレスのレンジ&lt;&#x2F;li&gt;
&lt;li&gt;作成日時&lt;&#x2F;li&gt;
&lt;li&gt;終了日時&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;既存のポートマッピングの削除&lt;&#x2F;li&gt;
&lt;li&gt;Remote - SSH 拡張の接続ダイアログボックスのオープン&lt;&#x2F;li&gt;
&lt;li&gt;オンラインの SIM カード一覧の表示&lt;&#x2F;li&gt;
&lt;li&gt;SORACOM カバレッジ(グローバル &#x2F; 日本) の切替&lt;&#x2F;li&gt;
&lt;li&gt;SIM の情報表示
&lt;ul&gt;
&lt;li&gt;IMSI&lt;&#x2F;li&gt;
&lt;li&gt;名前&lt;&#x2F;li&gt;
&lt;li&gt;SIM グループ ID&lt;&#x2F;li&gt;
&lt;li&gt;プラン (&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;air&#x2F;cellular&#x2F;price_iot_sim&#x2F;#plan01s&quot;&gt;plan01s&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;air&#x2F;cellular&#x2F;price_specific_area_sim&#x2F;#plan-d&quot;&gt;plan-D&lt;&#x2F;a&gt; など)&lt;&#x2F;li&gt;
&lt;li&gt;モジュールタイプ (標準 &#x2F; マイクロ &#x2F; ナノなど)&lt;&#x2F;li&gt;
&lt;li&gt;スピードクラス (&lt;code&gt;s1.fast&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;s1.slow&lt;&#x2F;code&gt; など)&lt;&#x2F;li&gt;
&lt;li&gt;IMEI&lt;&#x2F;li&gt;
&lt;li&gt;MSISDN&lt;&#x2F;li&gt;
&lt;li&gt;セッション状態&lt;&#x2F;li&gt;
&lt;li&gt;SIM そのものの IP アドレス&lt;&#x2F;li&gt;
&lt;li&gt;SIM のセッション状態 (最新 10)&lt;&#x2F;li&gt;
&lt;li&gt;Napter 監査ログ (最新 10) — 参照: &lt;a href=&quot;https:&#x2F;&#x2F;blog.soracom.jp&#x2F;blog&#x2F;2019&#x2F;10&#x2F;09&#x2F;starts-to-provide-audit-log-feature-on-soracom-napter&#x2F;&quot;&gt;【新機能】SORACOM Napter に監査ログ機能が導入されました – SORACOM エンジニアブログ&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;オペレーター ID とユーザー名の表示&lt;&#x2F;li&gt;
&lt;li&gt;ユーザーコンソールのデフォルトブラウザでのオープン&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ここから事前準備と使い方を説明します。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-qian-zhun-bei&quot;&gt;事前準備&lt;&#x2F;h2&gt;
&lt;p&gt;一度だけの事前準備として以下の 4 ステップが必要です。公式ドキュメントを紹介しつつ、簡単に手順を説明します。SORACOM Advent Calendar ということでアカウントの作成などは省いていますが、まだの方はぜひ &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;start&#x2F;&quot;&gt;SORACOM Air for セルラーの利用方法: 今すぐ始めよう&lt;&#x2F;a&gt; から。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(SORACOM ユーザーコンソールの作業) SAM ユーザーを作成し、認証キー ID と認証キーシークレットを生成する&lt;&#x2F;li&gt;
&lt;li&gt;(vscode での作業) Remote - SSH &#x2F; SORACOM Napter Tools 拡張をインストールする&lt;&#x2F;li&gt;
&lt;li&gt;(vscode での作業) SORACOM Napter Tools for Visual Studio Code 拡張を設定する&lt;&#x2F;li&gt;
&lt;li&gt;(アクセス先マシンでの作業) Raspberry Pi などに USB ドングル + SORACOM IoT SIM を装着する&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;sam-yuzawozuo-cheng-si-ren-zheng-ki-id-toren-zheng-kisikuretutowosheng-cheng-suru&quot;&gt;SAM ユーザーを作成し、認証キー ID と認証キーシークレットを生成する&lt;&#x2F;h3&gt;
&lt;p&gt;この拡張は SORACOM API を使用していますので、呼び出しのために認証キー ID と認証キーシークレットが必要です。まずはこれらをゲットしましょう。&lt;&#x2F;p&gt;
&lt;p&gt;セキュリティの観点から Napter Tools 専用の SORACOM Access Managament (SAM) ユーザーを作成することをおすすめします。SAM は、管理ユーザー毎にアクセス権限を設定できるアクセス管理機能で、不要なアクセスや操作ミスを未然に防げます。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&#x2F;&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; へログイン&lt;&#x2F;li&gt;
&lt;li&gt;右上のユーザー名のボタンから &lt;strong&gt;セキュリティ&lt;&#x2F;strong&gt; をクリック&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ユーザー作成&lt;&#x2F;strong&gt; ボタンをクリックし、適当な名前と説明を入力して &lt;strong&gt;作成&lt;&#x2F;strong&gt; ボタンをクリック&lt;&#x2F;li&gt;
&lt;li&gt;作成したユーザー名をクリック&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;権限設定&lt;&#x2F;strong&gt; タブで以下の拡張の動作に必要な権限のみを許可する設定を入力し &lt;strong&gt;保存&lt;&#x2F;strong&gt; ボタンをクリック&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;statements&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;api&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:listSubscribers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:getSubscriber&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:listPortMappings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:createPortMapping&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:deletePortMapping&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:listSessionEvents&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;AuditLog:getNapterAuditLogs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;effect&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;allow&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;strong&gt;認証設定&lt;&#x2F;strong&gt; タブの &lt;strong&gt;認証キーを生成&lt;&#x2F;strong&gt; ボタンをクリックし表示された &lt;strong&gt;認証キー ID&lt;&#x2F;strong&gt; と &lt;strong&gt;認証キーシークレット&lt;&#x2F;strong&gt; をコピー&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;用語や詳細なガイドは &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;api_guide&#x2F;&quot;&gt;SORACOM API 利用ガイド&lt;&#x2F;a&gt; を、権限設定の詳細は &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;sam&#x2F;#sam01&quot;&gt;SORACOM Access Management を使用して操作権限を管理する&lt;&#x2F;a&gt; も参照してみてください。(ここを書いているところで &lt;code&gt;PortMapping&lt;&#x2F;code&gt; に &lt;code&gt;listPortMappingsForSubscriber&lt;&#x2F;code&gt; というオペレーションがあることに気づきました。これを使うと API 呼び出しをもっと効率化できそうです。)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remote-ssh-soracom-napter-tools-kuo-zhang-woinsutorusuru&quot;&gt;Remote - SSH &#x2F; SORACOM Napter Tools 拡張をインストールする&lt;&#x2F;h3&gt;
&lt;p&gt;Visual Studio Marketplace から以下の 2 つの拡張をインストールしてください。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-vscode-remote.remote-ssh&quot;&gt;Remote - SSH&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=0x6b.soracom-napter-tools-vscode&quot;&gt;SORACOM Napter Tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;soracom-napter-tools-for-visual-studio-code-kuo-zhang-woshe-ding-suru&quot;&gt;SORACOM Napter Tools for Visual Studio Code 拡張を設定する&lt;&#x2F;h3&gt;
&lt;p&gt;vscode の設定画面を開き以下の設定を入力してください。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Auth &amp;gt; Authkey:ID&lt;&#x2F;strong&gt;: &lt;code&gt;keyId-&lt;&#x2F;code&gt; ではじまる &lt;strong&gt;認証キー ID&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Auth &amp;gt; Authkey:Secret&lt;&#x2F;strong&gt;: &lt;code&gt;secret-&lt;&#x2F;code&gt; ではじまる &lt;strong&gt;認証キーシークレット&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Napter &amp;gt; Ssh: User&lt;&#x2F;strong&gt;: SSH ログインユーザー名&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Napter: Port&lt;&#x2F;strong&gt;: SSH ポート番号&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
  &lt;img alt=&quot;vscode 設定画面&quot; src=&quot;settings.png&quot; &#x2F;&gt;
  &lt;figcaption&gt;vscode 設定画面&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;その他の設定はデフォルトのままでたぶん大丈夫です。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;raspberry-pi-nadoni-usb-donguru-soracom-iot-sim-wozhuang-zhao-suru&quot;&gt;Raspberry Pi などに USB ドングル + SORACOM IoT SIM を装着する&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;products&#x2F;module&#x2F;ak-020&#x2F;&quot;&gt;3G 対応データ通信端末 AK-020&lt;&#x2F;a&gt; や &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;products&#x2F;module&#x2F;ms2372h_607&#x2F;&quot;&gt;LTE 対応データ通信端末 Huawei MS2372h-607&lt;&#x2F;a&gt; などに SORACOM の SIM をセットし Raspberry Pi に装着、 &lt;a href=&quot;https:&#x2F;&#x2F;soracom-files.s3.amazonaws.com&#x2F;setup_air.sh&quot;&gt;&lt;code&gt;setup_air.sh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; を実行してセルラー通信ができるようにしてください。詳細な手順は &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;device_setting&#x2F;&quot;&gt;各種デバイスで SORACOM Air を使用する&lt;&#x2F;a&gt; にあります。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-ifang&quot;&gt;使い方&lt;&#x2F;h2&gt;
&lt;p&gt;さて、ここまで来たら Napter による SSH は簡単です(たぶん)。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;以下のいずれかの方法で &lt;strong&gt;Your SORACOM SIMs&lt;&#x2F;strong&gt; ビューを開きます
&lt;ul&gt;
&lt;li&gt;Activity Bar の Napter アイコンをクリックする&lt;&#x2F;li&gt;
&lt;li&gt;コマンドパレット (&lt;kbd&gt;⇧⌘P&lt;&#x2F;kbd&gt;) で &lt;strong&gt;Show SORACOM Napter Tools&lt;&#x2F;strong&gt; とタイプする&lt;&#x2F;li&gt;
&lt;li&gt;デフォルトのショートカットキー (&lt;kbd&gt;⌃⇧N&lt;&#x2F;kbd&gt;) を使う&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;オンラインの SIM が表示されますので Napter でアクセスしたい SIM を右クリック(または右端のアイコンをクリック)しポートマッピングを作成します&lt;&#x2F;li&gt;
&lt;li&gt;インプットボックスが表示されますので &lt;kbd&gt;⌘V&lt;&#x2F;kbd&gt; でペーストしエンターを押します&lt;&#x2F;li&gt;
&lt;li&gt;新しい vscode のウィンドウが開き接続します (初回接続時は Remote - SSH 拡張の設定のため多少時間がかかります)&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;ステップ 3 でインプットボックスにペーストしなければならないのがややかっこ悪いのですが、Remote - SSH 拡張が API を公開していないため苦肉の策であります。以下の issue で要望を出しています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;vscode-remote-release&#x2F;issues&#x2F;1888&quot;&gt;allow other extensions to pass connection string · Issue #1888 · microsoft&#x2F;vscode-remote-release&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2019-12-26-zhui-ji&quot;&gt;2019&#x2F;12&#x2F;26 追記&lt;&#x2F;h3&gt;
&lt;p&gt;上記の issue で分かりづらいんだけど &lt;code&gt;vscode.newWindow&lt;&#x2F;code&gt; でできるよ、と教えてもらいました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;executeCommand&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;vscode.newWindow&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  remoteAuthority&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;ssh-remote+...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということでバージョン 0.12.0 をリリースしました。既存の振る舞いを変えないよう新しいオプション &lt;code&gt;soracom.napter.ssh.autoConnection&lt;&#x2F;code&gt; を追加していますのでお好みでご利用ください。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;そのほかの設定項目やアイコンの説明は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soracom-napter-tools-vscode&quot;&gt;README&lt;&#x2F;a&gt; やソースコードをご覧ください。たとえば &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;&quot;&gt;soracom-cli&lt;&#x2F;a&gt; を使っている場合はその設定ファイルを使えます。また、よく使う操作は vscode のコマンドパレットに登録していますので、慣れるとキーボードだけで操作を完結できます。&lt;&#x2F;p&gt;
&lt;p&gt;バグ報告やご質問は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soracom-napter-tools-vscode&#x2F;issues&quot;&gt;GitHub Issues&lt;&#x2F;a&gt; までどうぞ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;この拡張は公開されている情報のみを利用して実装しました。API っていいですね。&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>

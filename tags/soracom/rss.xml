<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>&#x2F;&#x2F;&#x2F; ----- -..- -.... -...</title>
        <link>https://0x6b.github.io</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://0x6b.github.io/tags/soracom/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sat, 21 Dec 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>SORACOM CLI をもっと便利に使えるツール sorashell を作りました</title>
                <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
                <link>https://0x6b.github.io/super-charge-your-soracom-command-line-experience-with-sorashell/</link>
                <guid>https://0x6b.github.io/super-charge-your-soracom-command-line-experience-with-sorashell/</guid>
                <description>&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2019&#x2F;soracom2&quot;&gt;SORACOM Advent Calendar 2019 ふたつめ&lt;&#x2F;a&gt; 20 日目の記事です。&lt;&#x2F;p&gt;
&lt;p&gt;昨日は @kazntree の &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;kazntree&#x2F;items&#x2F;b2bc92508b789a47506f&quot;&gt;やさしさあふれる AT コマンド入門&lt;&#x2F;a&gt; でした。かるた作者の moznion による &lt;a href=&quot;https:&#x2F;&#x2F;moznion.hatenadiary.com&#x2F;entry&#x2F;2019&#x2F;09&#x2F;20&#x2F;172026&quot;&gt;頒布のお知らせ&lt;&#x2F;a&gt; と比べるとそのやさしさが際立っていますね。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;USB モデムに対して「ショートメッセージ（SMS）送って」とか「USB モデムのメーカーを教えて」などの命令を伝えるためのコマンドが &lt;code&gt;ATコマンド&lt;&#x2F;code&gt; なのです。
— &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;kazntree&#x2F;items&#x2F;b2bc92508b789a47506f&quot;&gt;やさしさあふれる AT コマンド入門 - Qiita&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ホラ，皆さん生きていると &lt;code&gt;AT+COPS&lt;&#x2F;code&gt; とか &lt;code&gt;AT+CGDCONT&lt;&#x2F;code&gt; とかよく見たり喋ったりするじゃないですか？
— &lt;a href=&quot;https:&#x2F;&#x2F;moznion.hatenadiary.com&#x2F;entry&#x2F;2019&#x2F;09&#x2F;20&#x2F;172026&quot;&gt;技術書典 7 (く 39D) にて「AT コマンドかるた」を頒布します！！！ - その手の平は尻もつかめるさ&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;どちらもとても尊敬しているエンジニアなのですが、表現に個性が垣間見えて面白いです。&lt;&#x2F;p&gt;
&lt;p&gt;さて、今回は SORACOM API をコマンドラインから使える &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;&quot;&gt;soracom-cli&lt;&#x2F;a&gt; をさらに便利にする &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;sorashell&#x2F;&quot;&gt;sorashell&lt;&#x2F;a&gt; というツールを作ってみたので紹介です。&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;cli&#x2F;&quot;&gt;aws-cli&lt;&#x2F;a&gt; に対する &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-shell&#x2F;&quot;&gt;aws-shell&lt;&#x2F;a&gt; のような位置付けです。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sorashell&quot;&gt;sorashell&lt;&#x2F;h2&gt;
&lt;p&gt;SORACOM CLI とは前述の通り SORACOM の API をコマンドラインから簡単に呼び出すツールです。&lt;a href=&quot;https:&#x2F;&#x2F;stedolan.github.io&#x2F;jq&#x2F;&quot;&gt;jq&lt;&#x2F;a&gt; など他のコマンドと組み合わせることで日々の操作を効率化しやすく、管理する SIM やデバイスが多くなるほど便利になっていきます。 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;blob&#x2F;master&#x2F;README_ja.md&quot;&gt;README_ja.md&lt;&#x2F;a&gt; から特徴を抜粋します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;API 定義ファイルから自動生成されるので新しい API がリリースされた場合も迅速に対応&lt;&#x2F;li&gt;
&lt;li&gt;Go でクロスコンパイルされたバイナリファイルをターゲットの環境にコピーするだけ&lt;&#x2F;li&gt;
&lt;li&gt;指定された引数を元にリクエストを組み立て、SORACOM API を呼び出し、レスポンス (JSON) をそのまま標準出力へ出力&lt;&#x2F;li&gt;
&lt;li&gt;bash&#x2F;zsh completion (引数補完) に対応&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;もうこれだけで充分に素敵ツールなのですが、たとえば以下のような悩みがありました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--speed-class-filter&lt;&#x2F;code&gt; や &lt;code&gt;--tag-value-match-mode&lt;&#x2F;code&gt; オプションに指定する値が分からず &lt;a href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;search?client=firefox-b-d&amp;amp;q=%E3%82%BD%E3%83%A9%E3%82%B3%E3%83%A0+SIM+%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%AF%E3%83%A9%E3%82%B9&quot;&gt;&lt;code&gt;ソラコム SIM スピードクラス&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; などで検索したり、コマンドを一旦キャンセルしてヘルプを見てしまう&lt;&#x2F;li&gt;
&lt;li&gt;SIM の IMSI や &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;inventory&#x2F;&quot;&gt;SORACOM Inventory&lt;&#x2F;a&gt; のデバイス ID を結局 &lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; からコピペでもってきてしまう&lt;&#x2F;li&gt;
&lt;li&gt;SIM や Sigfox デバイスの名前で &lt;code&gt;subscribers get&lt;&#x2F;code&gt; や &lt;code&gt;sigfox-devices get&lt;&#x2F;code&gt; できるともっと便利なのに&lt;&#x2F;li&gt;
&lt;li&gt;必須オプション覚えられない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そんなときに aws-shell を試してみて、これは便利だなと思い Go の勉強を兼ね作ってみました。&lt;&#x2F;p&gt;
&lt;center&gt;
  &lt;video controls&gt;
    &lt;source src=&quot;screencast.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
    Your browser does not support the video tag.
  &lt;&#x2F;video&gt;
  &lt;figcaption&gt;sorashell&lt;&#x2F;figcaption&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;補完機能と Fuzzy マッチがとても便利で日々使っています。自分用のはじめての Go プログラムということで荒削りな部分だらけで現時点では macOS のみ対応です。コマンドのパース部分をもっとちゃんと書きたい感じです。&lt;&#x2F;p&gt;
&lt;p&gt;補完を含むターミナル UI は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;c-bata&#x2F;go-prompt&#x2F;&quot;&gt;c-bata&#x2F;go-prompt&lt;&#x2F;a&gt; という素晴らしいライブラリを利用しました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-qian-zhun-bei&quot;&gt;事前準備&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;soracom&lt;&#x2F;code&gt; コマンドを &lt;code&gt;os&#x2F;exec&lt;&#x2F;code&gt; 使って呼び出しているだけですので、使うためには SORACOM CLI のセットアップが必要です。 &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;cli_guide&#x2F;&quot;&gt;SORACOM CLI 利用ガイド&lt;&#x2F;a&gt; にステップバイステップで記載されています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;insutoru&quot;&gt;インストール&lt;&#x2F;h2&gt;
&lt;p&gt;今のところは Go のインストールとリポジトリのクローン、ビルドが必要です。GitHub Actions などでビルドとリリースを自動化しようと思っていますが、アドベントカレンダーに間に合いませんでした (リポジトリには試行錯誤の残骸あり)。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;dl&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt; の導入&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rakyll&#x2F;static&lt;&#x2F;code&gt; の導入&lt;pre style=&quot;background-color:#0f1419;&quot;&gt;
&lt;span style=&quot;color:#bfbab0;&quot;&gt;$ go get github.com&#x2F;rakyll&#x2F;statik # install rakyll&#x2F;statik, asset embedder
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;リポジトリのクローン&lt;pre style=&quot;background-color:#0f1419;&quot;&gt;
&lt;span style=&quot;color:#bfbab0;&quot;&gt;$ git clone https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;sorashell
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;ビルド&lt;pre style=&quot;background-color:#0f1419;&quot;&gt;
&lt;span style=&quot;color:#bfbab0;&quot;&gt;$ cd sorashell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;$ make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;$ cp .&#x2F;sorashell &#x2F;path&#x2F;to&#x2F;your&#x2F;bin&#x2F;directory
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;shi-ifang&quot;&gt;使い方&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sorashell&lt;&#x2F;code&gt; コマンドを実行するとシェルが立ち上がります。 SORACOM CLI と同じグローバルフラグを使えます。&lt;pre style=&quot;background-color:#0f1419;&quot;&gt;
&lt;span style=&quot;color:#bfbab0;&quot;&gt;    --api-key string         Specify API key otherwise soracom-cli performs authentication on behalf of you
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;    --api-token string       Specify API token otherwise soracom-cli performs authentication on behalf of you
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;    --coverage-type string   Specify coverage type, &amp;#39;g&amp;#39; for Global, &amp;#39;jp&amp;#39; for Japan
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;-h, --help                   help for soracom
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;    --profile string         Specify profile name
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SORACOM CLI と同じコマンド、引数を受け付けます (最初の &lt;code&gt;soracom&lt;&#x2F;code&gt; は不要)。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; キーで補完候補を移動し &lt;kbd&gt;Space&lt;&#x2F;kbd&gt; キーで選択します。&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;tips-tricks&quot;&gt;Tips &amp;amp; Tricks&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンド名やオプション名は Fuzzy マッチします。たとえば &lt;code&gt;--speed-class-filter&lt;&#x2F;code&gt; は &lt;code&gt;--scf&lt;&#x2F;code&gt; と入力してもマッチします。&lt;&#x2F;li&gt;
&lt;li&gt;コマンドの補完候補が出なくなったら &lt;code&gt;--&lt;&#x2F;code&gt; を入力するとオプションの補完を始めます。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--imsi&lt;&#x2F;code&gt; や &lt;code&gt;--device-id&lt;&#x2F;code&gt;、&lt;code&gt;--resource-id&lt;&#x2F;code&gt; オプションを入力すると、引数の対象となる SIM の IMSI やデバイス ID を取得し補完候補に出します。表示されているすべての文字列 (プランやステータス、名前、モジュールタイプなど) から Fuzzy マッチできます。&lt;&#x2F;li&gt;
&lt;li&gt;必須オプションには説明に &lt;code&gt;(required)&lt;&#x2F;code&gt; と表示されます。&lt;&#x2F;li&gt;
&lt;li&gt;以下のオプションに指定できる補完候補を表示します。
&lt;ul&gt;
&lt;li&gt;SIM ステータス (&lt;code&gt;--status-filter&lt;&#x2F;code&gt;): &lt;code&gt;active&lt;&#x2F;code&gt;, &lt;code&gt;inactive&lt;&#x2F;code&gt;, &lt;code&gt;ready&lt;&#x2F;code&gt;, &lt;code&gt;suspended&lt;&#x2F;code&gt;, &lt;code&gt;terminated&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SIM スピードクラス (&lt;code&gt;--speed-class-filter&lt;&#x2F;code&gt;): &lt;code&gt;s1.minimum&lt;&#x2F;code&gt;, &lt;code&gt;s1.slow&lt;&#x2F;code&gt;, &lt;code&gt;s1.standard&lt;&#x2F;code&gt;, &lt;code&gt;s1.fast&lt;&#x2F;code&gt;, &lt;code&gt;s1.4xfast&lt;&#x2F;code&gt;, &lt;code&gt;t1.standard&lt;&#x2F;code&gt;, &lt;code&gt;u1.slow&lt;&#x2F;code&gt;, &lt;code&gt;u1.standard&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;他のコマンドへのパイプ &lt;code&gt;|&lt;&#x2F;code&gt; やファイルへのリダイレクト &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; が使えます。&lt;&#x2F;li&gt;
&lt;li&gt;先頭に &lt;code&gt;!&lt;&#x2F;code&gt; を入れると通常のコマンド (&lt;code&gt;!cd &#x2F;Users&#x2F;soracom&#x2F;Desktop&lt;&#x2F;code&gt; や &lt;code&gt;!ls&lt;&#x2F;code&gt; など)が実行できます。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;パラメーターとしてファイルを引数に取るコマンド (&lt;code&gt;event-handlers create&lt;&#x2F;code&gt;) をうまく処理できていません。(また、私がよく使うコマンド以外はあまりテストできていませんので、バグやご質問は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;sorashell&#x2F;issues&quot;&gt;GitHub Issue&lt;&#x2F;a&gt; まで。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;IoT は管理対象デバイス数が大量になりがちです。API や CLI を日々の業務に取り入れて効率化していきたいですね。&lt;&#x2F;p&gt;
&lt;p&gt;この記事の URL は Amazon Web Services Solutions Architect ブログへのトリビュートです。タイトルや内容は恐れ多くて真似できませんでした。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.typepad.com&#x2F;sajp&#x2F;2015&#x2F;12&#x2F;super-charge-your-aws-command-line-experience-with-aws-shell.html&quot;&gt;AWS Solutions Architect ブログ: AWS のコマンドライン体験を aws-shell で革新！&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>SORACOM Napter 用の Visual Studio Code 拡張を作りました</title>
                <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
                <link>https://0x6b.github.io/soracom-napter-tools-vscode/</link>
                <guid>https://0x6b.github.io/soracom-napter-tools-vscode/</guid>
                <description>&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;advent-calendar&#x2F;2019&#x2F;soracom&quot;&gt;SORACOM Advent Calendar 2019&lt;&#x2F;a&gt; 13 日目の記事です。&lt;&#x2F;p&gt;
&lt;p&gt;昨日は @toolyee からの &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@toolyee&#x2F;iot%E3%81%AE%E4%B8%80%E7%95%AA%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%87%E3%83%A2-%E5%BD%93%E7%A4%BE%E6%AF%94-be76fd2c5184?&quot;&gt;IoT の一番簡単なデモ！(当社比)&lt;&#x2F;a&gt; でした。@hayate_h さんの &lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;hayate_h&#x2F;items&#x2F;4b755e15ec9cd5a55e31&quot;&gt;SORACOM LTE-M Button を使って、「モテモテスイッチ」を開発する。&lt;&#x2F;a&gt; から LTE-M ボタンの話題が続いたところで、今回は SORACOM Napter のお話です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soracom-napter-toha&quot;&gt;SORACOM Napter とは&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;napter&#x2F;&quot;&gt;SORACOM Napter&lt;&#x2F;a&gt; (以下 Napter) は、SORACOM の SIM を使用したデバイスへ簡単にセキュアにリモートアクセスできるサービスです。SORACOM IoT SIM のささっているデバイスであれば、グローバル IP アドレスを割り当てたり、踏み台サーバーを用意したり、エージェントなどをインストールしたりせず手軽にリモートからアクセスできます。&lt;&#x2F;p&gt;
&lt;p&gt;同僚が &lt;a href=&quot;https:&#x2F;&#x2F;nodered.org&#x2F;&quot;&gt;Node-RED&lt;&#x2F;a&gt; と組み合わせて &lt;a href=&quot;https:&#x2F;&#x2F;blog.soracom.jp&#x2F;blog&#x2F;2019&#x2F;09&#x2F;10&#x2F;napter-nodered&#x2F;&quot;&gt;ウキウキリモート開発&lt;&#x2F;a&gt; しており、なるほどなーと思っていたのですが、つい最近テスト用に使っていた Raspberry Pi の Wi-Fi が壊れたため私も多用するようになりました (必要なものはすぐに購入できる会社ですが、Raspberry Pi 4 リリースのため品薄ですぐに手に入らず)。&lt;&#x2F;p&gt;
&lt;p&gt;Napter によるオンデマンドリモートアクセスは &lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&#x2F;&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; から有効にできます。以下のように本当に簡単に使えるので私もウキウキリモート開発していました。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ユーザーコンソールへログインする&lt;&#x2F;li&gt;
&lt;li&gt;自分の SIM を探す&lt;&#x2F;li&gt;
&lt;li&gt;メニューから &lt;strong&gt;オンデマンドリモートアクセス&lt;&#x2F;strong&gt; を選択する&lt;&#x2F;li&gt;
&lt;li&gt;OK を押す&lt;&#x2F;li&gt;
&lt;li&gt;払い出された IP アドレスとポート番号をコピペしてターミナルから SSH を使ってアクセスする&lt;&#x2F;li&gt;
&lt;li&gt;あれこれする&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;そんな折りに別の同僚から Visual Studio Code (以下 vscode) の &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-vscode-remote.remote-ssh&quot;&gt;Remote - SSH 拡張&lt;&#x2F;a&gt; を使うと Raspberry Pi での開発がえらく楽になるよと教えてもらいました。試してみるとなるほど便利で、普段使いしているエディタがそのまま使えるしターミナルも使えるしで Napter とあわせて多用するようになりました。&lt;&#x2F;p&gt;
&lt;p&gt;で、日々ユーザーコンソールと vscode を行ったり来たりしていたのですが、ふと「SORACOM はほとんどの操作について &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;api&#x2F;#&#x2F;&quot;&gt;API を公開している&lt;&#x2F;a&gt;し 、vscode も &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;api&#x2F;&quot;&gt;拡張が作れる&lt;&#x2F;a&gt; し、この 2 つを合体させたらえらく便利なのでは？」と思いたち作ってみました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soracom-napter-tools-for-visual-studio-code&quot;&gt;SORACOM Napter Tools for Visual Studio Code&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=0x6b.soracom-napter-tools-vscode&quot;&gt;SORACOM Napter Tools for Visual Studio Code&lt;&#x2F;a&gt; (以下 Napter Tools) という Napter と vscode を組み合わせて便利に使える拡張を作りました。&lt;&#x2F;p&gt;
&lt;center&gt;
  &lt;video controls&gt;
    &lt;source src=&quot;screencast.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
    Your browser does not support the video tag.
  &lt;&#x2F;video&gt;
  &lt;figcaption&gt;SORACOM Napter Tools for Visual Studio Code&lt;&#x2F;figcaption&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;動画を見ていただくと大体想像つくと思いますが、以下の操作が vscode の中で完結します(動画では 3G 使っているため SSH 接続まで少し時間がかかっています)。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;新しいポートマッピング (Napter オンデマンドリモートアクセス)の作成&lt;&#x2F;li&gt;
&lt;li&gt;既存のポートマッピングの情報表示
&lt;ul&gt;
&lt;li&gt;Napter から割り当てられたホスト名、IP アドレス、ポート番号&lt;&#x2F;li&gt;
&lt;li&gt;有効期間&lt;&#x2F;li&gt;
&lt;li&gt;TLS 有効の有無&lt;&#x2F;li&gt;
&lt;li&gt;宛先ポート番号&lt;&#x2F;li&gt;
&lt;li&gt;接続可能なソース IP アドレスのレンジ&lt;&#x2F;li&gt;
&lt;li&gt;作成日時&lt;&#x2F;li&gt;
&lt;li&gt;終了日時&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;既存のポートマッピングの削除&lt;&#x2F;li&gt;
&lt;li&gt;Remote - SSH 拡張の接続ダイアログボックスのオープン&lt;&#x2F;li&gt;
&lt;li&gt;オンラインの SIM カード一覧の表示&lt;&#x2F;li&gt;
&lt;li&gt;SORACOM カバレッジ(グローバル &#x2F; 日本) の切替&lt;&#x2F;li&gt;
&lt;li&gt;SIM の情報表示
&lt;ul&gt;
&lt;li&gt;IMSI&lt;&#x2F;li&gt;
&lt;li&gt;名前&lt;&#x2F;li&gt;
&lt;li&gt;SIM グループ ID&lt;&#x2F;li&gt;
&lt;li&gt;プラン (&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;air&#x2F;cellular&#x2F;price_iot_sim&#x2F;#plan01s&quot;&gt;plan01s&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;services&#x2F;air&#x2F;cellular&#x2F;price_specific_area_sim&#x2F;#plan-d&quot;&gt;plan-D&lt;&#x2F;a&gt; など)&lt;&#x2F;li&gt;
&lt;li&gt;モジュールタイプ (標準 &#x2F; マイクロ &#x2F; ナノなど)&lt;&#x2F;li&gt;
&lt;li&gt;スピードクラス (&lt;code&gt;s1.fast&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;s1.slow&lt;&#x2F;code&gt; など)&lt;&#x2F;li&gt;
&lt;li&gt;IMEI&lt;&#x2F;li&gt;
&lt;li&gt;MSISDN&lt;&#x2F;li&gt;
&lt;li&gt;セッション状態&lt;&#x2F;li&gt;
&lt;li&gt;SIM そのものの IP アドレス&lt;&#x2F;li&gt;
&lt;li&gt;SIM のセッション状態 (最新 10)&lt;&#x2F;li&gt;
&lt;li&gt;Napter 監査ログ (最新 10) — 参照: &lt;a href=&quot;https:&#x2F;&#x2F;blog.soracom.jp&#x2F;blog&#x2F;2019&#x2F;10&#x2F;09&#x2F;starts-to-provide-audit-log-feature-on-soracom-napter&#x2F;&quot;&gt;【新機能】SORACOM Napter に監査ログ機能が導入されました – SORACOM エンジニアブログ&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;オペレーター ID とユーザー名の表示&lt;&#x2F;li&gt;
&lt;li&gt;ユーザーコンソールのデフォルトブラウザでのオープン&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ここから事前準備と使い方を説明します。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-qian-zhun-bei&quot;&gt;事前準備&lt;&#x2F;h2&gt;
&lt;p&gt;一度だけの事前準備として以下の 4 ステップが必要です。公式ドキュメントを紹介しつつ、簡単に手順を説明します。SORACOM Advent Calendar ということでアカウントの作成などは省いていますが、まだの方はぜひ &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;start&#x2F;&quot;&gt;SORACOM Air for セルラーの利用方法: 今すぐ始めよう&lt;&#x2F;a&gt; から。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(SORACOM ユーザーコンソールの作業) SAM ユーザーを作成し、認証キー ID と認証キーシークレットを生成する&lt;&#x2F;li&gt;
&lt;li&gt;(vscode での作業) Remote - SSH &#x2F; SORACOM Napter Tools 拡張をインストールする&lt;&#x2F;li&gt;
&lt;li&gt;(vscode での作業) SORACOM Napter Tools for Visual Studio Code 拡張を設定する&lt;&#x2F;li&gt;
&lt;li&gt;(アクセス先マシンでの作業) Raspberry Pi などに USB ドングル + SORACOM IoT SIM を装着する&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;sam-yuzawozuo-cheng-si-ren-zheng-ki-id-toren-zheng-kisikuretutowosheng-cheng-suru&quot;&gt;SAM ユーザーを作成し、認証キー ID と認証キーシークレットを生成する&lt;&#x2F;h3&gt;
&lt;p&gt;この拡張は SORACOM API を使用していますので、呼び出しのために認証キー ID と認証キーシークレットが必要です。まずはこれらをゲットしましょう。&lt;&#x2F;p&gt;
&lt;p&gt;セキュリティの観点から Napter Tools 専用の SORACOM Access Managament (SAM) ユーザーを作成することをおすすめします。SAM は、管理ユーザー毎にアクセス権限を設定できるアクセス管理機能で、不要なアクセスや操作ミスを未然に防げます。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;console.soracom.io&#x2F;&quot;&gt;SORACOM ユーザーコンソール&lt;&#x2F;a&gt; へログイン&lt;&#x2F;li&gt;
&lt;li&gt;右上のユーザー名のボタンから &lt;strong&gt;セキュリティ&lt;&#x2F;strong&gt; をクリック&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ユーザー作成&lt;&#x2F;strong&gt; ボタンをクリックし、適当な名前と説明を入力して &lt;strong&gt;作成&lt;&#x2F;strong&gt; ボタンをクリック&lt;&#x2F;li&gt;
&lt;li&gt;作成したユーザー名をクリック&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;権限設定&lt;&#x2F;strong&gt; タブで以下の拡張の動作に必要な権限のみを許可する設定を入力し &lt;strong&gt;保存&lt;&#x2F;strong&gt; ボタンをクリック&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#0f1419;&quot;&gt;
&lt;span style=&quot;color:#bfbab0;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;&amp;quot;statements&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;[
    {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;&amp;quot;api&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;[
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:listSubscribers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:getSubscriber&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:listPortMappings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:createPortMapping&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;PortMapping:deletePortMapping&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;Subscriber:listSessionEvents&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;AuditLog:getNapterAuditLogs&amp;quot;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae6;&quot;&gt;&amp;quot;effect&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;allow&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0;&quot;&gt;}
  ]
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;strong&gt;認証設定&lt;&#x2F;strong&gt; タブの &lt;strong&gt;認証キーを生成&lt;&#x2F;strong&gt; ボタンをクリックし表示された &lt;strong&gt;認証キー ID&lt;&#x2F;strong&gt; と &lt;strong&gt;認証キーシークレット&lt;&#x2F;strong&gt; をコピー&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;用語や詳細なガイドは &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;docs&#x2F;api_guide&#x2F;&quot;&gt;SORACOM API 利用ガイド&lt;&#x2F;a&gt; を、権限設定の詳細は &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;sam&#x2F;#sam01&quot;&gt;SORACOM Access Management を使用して操作権限を管理する&lt;&#x2F;a&gt; も参照してみてください。(ここを書いているところで &lt;code&gt;PortMapping&lt;&#x2F;code&gt; に &lt;code&gt;listPortMappingsForSubscriber&lt;&#x2F;code&gt; というオペレーションがあることに気づきました。これを使うと API 呼び出しをもっと効率化できそうです。)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remote-ssh-soracom-napter-tools-kuo-zhang-woinsutorusuru&quot;&gt;Remote - SSH &#x2F; SORACOM Napter Tools 拡張をインストールする&lt;&#x2F;h3&gt;
&lt;p&gt;Visual Studio Marketplace から以下の 2 つの拡張をインストールしてください。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-vscode-remote.remote-ssh&quot;&gt;Remote - SSH&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=0x6b.soracom-napter-tools-vscode&quot;&gt;SORACOM Napter Tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;soracom-napter-tools-for-visual-studio-code-kuo-zhang-woshe-ding-suru&quot;&gt;SORACOM Napter Tools for Visual Studio Code 拡張を設定する&lt;&#x2F;h3&gt;
&lt;p&gt;vscode の設定画面を開き以下の設定を入力してください。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Auth &amp;gt; Authkey:ID&lt;&#x2F;strong&gt;: &lt;code&gt;keyId-&lt;&#x2F;code&gt; ではじまる &lt;strong&gt;認証キー ID&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Auth &amp;gt; Authkey:Secret&lt;&#x2F;strong&gt;: &lt;code&gt;secret-&lt;&#x2F;code&gt; ではじまる &lt;strong&gt;認証キーシークレット&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Napter &amp;gt; Ssh: User&lt;&#x2F;strong&gt;: SSH ログインユーザー名&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Soracom &amp;gt; Napter: Port&lt;&#x2F;strong&gt;: SSH ポート番号&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
  &lt;img alt=&quot;vscode 設定画面&quot; src=&quot;settings.png&quot; &#x2F;&gt;
  &lt;figcaption&gt;vscode 設定画面&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;その他の設定はデフォルトのままでたぶん大丈夫です。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;raspberry-pi-nadoni-usb-donguru-soracom-iot-sim-wozhuang-zhao-suru&quot;&gt;Raspberry Pi などに USB ドングル + SORACOM IoT SIM を装着する&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;products&#x2F;module&#x2F;ak-020&#x2F;&quot;&gt;3G 対応データ通信端末 AK-020&lt;&#x2F;a&gt; や &lt;a href=&quot;https:&#x2F;&#x2F;soracom.jp&#x2F;products&#x2F;module&#x2F;ms2372h_607&#x2F;&quot;&gt;LTE 対応データ通信端末 Huawei MS2372h-607&lt;&#x2F;a&gt; などに SORACOM の SIM をセットし Raspberry Pi に装着、 &lt;a href=&quot;https:&#x2F;&#x2F;soracom-files.s3.amazonaws.com&#x2F;setup_air.sh&quot;&gt;&lt;code&gt;setup_air.sh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; を実行してセルラー通信ができるようにしてください。詳細な手順は &lt;a href=&quot;https:&#x2F;&#x2F;dev.soracom.io&#x2F;jp&#x2F;start&#x2F;device_setting&#x2F;&quot;&gt;各種デバイスで SORACOM Air を使用する&lt;&#x2F;a&gt; にあります。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-ifang&quot;&gt;使い方&lt;&#x2F;h2&gt;
&lt;p&gt;さて、ここまで来たら Napter による SSH は簡単です(たぶん)。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;以下のいずれかの方法で &lt;strong&gt;Your SORACOM SIMs&lt;&#x2F;strong&gt; ビューを開きます
&lt;ul&gt;
&lt;li&gt;Activity Bar の Napter アイコンをクリックする&lt;&#x2F;li&gt;
&lt;li&gt;コマンドパレット (&lt;kbd&gt;⇧⌘P&lt;&#x2F;kbd&gt;) で &lt;strong&gt;Show SORACOM Napter Tools&lt;&#x2F;strong&gt; とタイプする&lt;&#x2F;li&gt;
&lt;li&gt;デフォルトのショートカットキー (&lt;kbd&gt;⌃⇧N&lt;&#x2F;kbd&gt;) を使う&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;オンラインの SIM が表示されますので Napter でアクセスしたい SIM を右クリック(または右端のアイコンをクリック)しポートマッピングを作成します&lt;&#x2F;li&gt;
&lt;li&gt;インプットボックスが表示されますので &lt;kbd&gt;⌘V&lt;&#x2F;kbd&gt; でペーストしエンターを押します&lt;&#x2F;li&gt;
&lt;li&gt;新しい vscode のウィンドウが開き接続します (初回接続時は Remote - SSH 拡張の設定のため多少時間がかかります)&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;ステップ 3 でインプットボックスにペーストしなければならないのがややかっこ悪いのですが、Remote - SSH 拡張が API を公開していないため苦肉の策であります。以下の issue で要望を出しています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;vscode-remote-release&#x2F;issues&#x2F;1888&quot;&gt;allow other extensions to pass connection string · Issue #1888 · microsoft&#x2F;vscode-remote-release&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そのほかの設定項目やアイコンの説明は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soracom-napter-tools-vscode&quot;&gt;README&lt;&#x2F;a&gt; やソースコードをご覧ください。たとえば &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soracom&#x2F;soracom-cli&#x2F;&quot;&gt;soracom-cli&lt;&#x2F;a&gt; を使っている場合はその設定ファイルを使えます。また、よく使う操作は vscode のコマンドパレットに登録していますので、慣れるとキーボードだけで操作を完結できます。&lt;&#x2F;p&gt;
&lt;p&gt;バグ報告やご質問は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x6b&#x2F;soracom-napter-tools-vscode&#x2F;issues&quot;&gt;GitHub Issue&lt;&#x2F;a&gt; までどうぞ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;この拡張は公開されている情報のみを利用して実装しました。API っていいですね。&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
